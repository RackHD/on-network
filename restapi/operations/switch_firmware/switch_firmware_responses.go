// Copyright 2017, Dell EMC, Inc.

// Code generated by go-swagger; DO NOT EDIT.

package switch_firmware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/on-network/models"
)

// SwitchFirmwareOKCode is the HTTP code returned for type SwitchFirmwareOK
const SwitchFirmwareOKCode int = 200

/*SwitchFirmwareOK Successfully returned switch firmware version

swagger:response switchFirmwareOK
*/
type SwitchFirmwareOK struct {

	/*
	  In: Body
	*/
	Payload *models.SwitchVersionResponse `json:"body,omitempty"`
}

// NewSwitchFirmwareOK creates SwitchFirmwareOK with default headers values
func NewSwitchFirmwareOK() *SwitchFirmwareOK {
	return &SwitchFirmwareOK{}
}

// WithPayload adds the payload to the switch firmware o k response
func (o *SwitchFirmwareOK) WithPayload(payload *models.SwitchVersionResponse) *SwitchFirmwareOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the switch firmware o k response
func (o *SwitchFirmwareOK) SetPayload(payload *models.SwitchVersionResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwitchFirmwareOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SwitchFirmwareDefault Error

swagger:response switchFirmwareDefault
*/
type SwitchFirmwareDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwitchFirmwareDefault creates SwitchFirmwareDefault with default headers values
func NewSwitchFirmwareDefault(code int) *SwitchFirmwareDefault {
	if code <= 0 {
		code = 500
	}

	return &SwitchFirmwareDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the switch firmware default response
func (o *SwitchFirmwareDefault) WithStatusCode(code int) *SwitchFirmwareDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the switch firmware default response
func (o *SwitchFirmwareDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the switch firmware default response
func (o *SwitchFirmwareDefault) WithPayload(payload *models.ErrorResponse) *SwitchFirmwareDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the switch firmware default response
func (o *SwitchFirmwareDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwitchFirmwareDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
