// Copyright 2017, Dell EMC, Inc.

// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/RackHD/on-network/restapi/operations"

	"github.com/RackHD/on-network/restapi/operations/about"
	"github.com/RackHD/on-network/restapi/operations/switch_config"
	"github.com/RackHD/on-network/restapi/operations/switch_firmware"
	"github.com/RackHD/on-network/restapi/operations/update_switch"
	"github.com/RackHD/on-network/restapi/operations/check_vlan"
	"github.com/RackHD/on-network/restapi/operations/switch_version"

	aboutctrl "github.com/RackHD/on-network/controllers/about"
	authctrl "github.com/RackHD/on-network/controllers/auth"
	configswitchctrl "github.com/RackHD/on-network/controllers/switch_config"
	switchfirmwarectrl "github.com/RackHD/on-network/controllers/switch_firmware"
	switchversionctrl "github.com/RackHD/on-network/controllers/switch_version"
	updateswitchctrl "github.com/RackHD/on-network/controllers/update_switch"
	checkvlanctrl "github.com/RackHD/on-network/controllers/check_vlan"
	"github.com/RackHD/on-network/restapi/operations/auth"

	"strings"

)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name on-network --spec ../swagger.yaml

func configureFlags(api *operations.OnNetworkAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.OnNetworkAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	/*// Applies when the "authorization" header is set
	api.APIKeyHeaderAuth = func(token string) (interface{}, error) {
		return token, nil
	}*/

	// Set your custom authorizer if needed. Default one is security.Authorized()
	// Expected interface runtime.Authorizer
	//
	// Example:
	// api.APIAuthorizer = security.Authorized()

	api.AuthPostLoginHandler = auth.PostLoginHandlerFunc(func(params auth.PostLoginParams) middleware.Responder {
		return authctrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.AboutAboutGetHandler = about.AboutGetHandlerFunc(func(params about.AboutGetParams, principal interface{}) middleware.Responder {
		return aboutctrl.MiddleWare(params.HTTPRequest)
	})

	api.UpdateSwitchUpdateSwitchHandler = update_switch.UpdateSwitchHandlerFunc(func(params update_switch.UpdateSwitchParams, principal interface{}) middleware.Responder {
		return updateswitchctrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.SwitchConfigSwitchConfigHandler = switch_config.SwitchConfigHandlerFunc(func(params switch_config.SwitchConfigParams, principal interface{}) middleware.Responder {
		return configswitchctrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.SwitchFirmwareSwitchFirmwareHandler = switch_firmware.SwitchFirmwareHandlerFunc(func(params switch_firmware.SwitchFirmwareParams, principal interface{}) middleware.Responder {
		return switchfirmwarectrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.SwitchVersionSwitchVersionHandler = switch_version.SwitchVersionHandlerFunc(func(params switch_version.SwitchVersionParams, principal interface{}) middleware.Responder {
		return switchversionctrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.CheckVlanCheckVlanHandler =  check_vlan.CheckVlanHandlerFunc (func(params check_vlan.CheckVlanParams, principal interface{}) middleware.Responder {
		return checkvlanctrl.MiddleWare(params.HTTPRequest, params.Body)
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return uiMiddleware(redocMiddleware(handler))
}

func redocMiddleware(handler http.Handler) http.Handler {
	return middleware.Redoc(middleware.RedocOpts{}, handler)
}
func uiMiddleware(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Shortcut helpers for swagger-ui
		if r.URL.Path == "/swagger-ui" || r.URL.Path == "/api/help" {
			http.Redirect(w, r, "/swagger-ui/", http.StatusFound)
			return
		}
		// Serving ./swagger-ui/
		if strings.Index(r.URL.Path, "/swagger-ui/") == 0 {
			http.StripPrefix("/swagger-ui/", http.FileServer(http.Dir("swagger-ui"))).ServeHTTP(w, r)
			return
		}
		handler.ServeHTTP(w, r)
	})
}
