// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareImage firmware image
// swagger:model FirmwareImage

type FirmwareImage struct {

	// image type
	// Required: true
	ImageType *string `json:"imageType"`

	// image URL
	// Required: true
	ImageURL *string `json:"imageURL"`
}

/* polymorph FirmwareImage imageType false */

/* polymorph FirmwareImage imageURL false */

// Validate validates this firmware image
func (m *FirmwareImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var firmwareImageTypeImageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kickstart","system"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareImageTypeImageTypePropEnum = append(firmwareImageTypeImageTypePropEnum, v)
	}
}

const (
	// FirmwareImageImageTypeKickstart captures enum value "kickstart"
	FirmwareImageImageTypeKickstart string = "kickstart"
	// FirmwareImageImageTypeSystem captures enum value "system"
	FirmwareImageImageTypeSystem string = "system"
)

// prop value enum
func (m *FirmwareImage) validateImageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareImageTypeImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareImage) validateImageType(formats strfmt.Registry) error {

	if err := validate.Required("imageType", "body", m.ImageType); err != nil {
		return err
	}

	// value enum
	if err := m.validateImageTypeEnum("imageType", "body", *m.ImageType); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareImage) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("imageURL", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareImage) UnmarshalBinary(b []byte) error {
	var res FirmwareImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
