// Copyright 2017, Dell EMC, Inc.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSwitch update switch
// swagger:model UpdateSwitch

type UpdateSwitch struct {

	// endpoint
	// Required: true
	Endpoint *SwitchEndpoint `json:"endpoint"`

	// firmware images
	// Required: true
	// Min Items: 1
	FirmwareImages []*FirmwareImage `json:"firmwareImages"`

	// switch model
	// Required: true
	SwitchModel *string `json:"switchModel"`
}

/* polymorph UpdateSwitch endpoint false */

/* polymorph UpdateSwitch firmwareImages false */

/* polymorph UpdateSwitch switchModel false */

// Validate validates this update switch
func (m *UpdateSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirmwareImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSwitchModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSwitch) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	if m.Endpoint != nil {

		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateSwitch) validateFirmwareImages(formats strfmt.Registry) error {

	if err := validate.Required("firmwareImages", "body", m.FirmwareImages); err != nil {
		return err
	}

	iFirmwareImagesSize := int64(len(m.FirmwareImages))

	if err := validate.MinItems("firmwareImages", "body", iFirmwareImagesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FirmwareImages); i++ {

		if swag.IsZero(m.FirmwareImages[i]) { // not required
			continue
		}

		if m.FirmwareImages[i] != nil {

			if err := m.FirmwareImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("firmwareImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateSwitch) validateSwitchModel(formats strfmt.Registry) error {

	if err := validate.Required("switchModel", "body", m.SwitchModel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSwitch) UnmarshalBinary(b []byte) error {
	var res UpdateSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
